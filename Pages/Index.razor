@page "/"
@inject INotesRepo _repo

@if (NewNote)
{
    <NoteComponent Note="(new Note())" 
        CurrentState="@NoteComponent.NoteState.New" 
        AddNote="AddNoteToNotes" 
        CancelNewNote="CancelAdd"></NoteComponent>
}

@if (_notes != null)
{
    @foreach (var note in _notes)
    {
        if (SearchQuery == null || SearchQuery == "")
        {
            <NoteComponent Note="note"></NoteComponent>
        }
        else if (Regex.IsMatch(note.Title, SearchQuery) || Regex.IsMatch(note.Content, SearchQuery))
        {
            <NoteComponent Note="note"></NoteComponent>
        }
    }
}


@code {
    private List<Note> _notes;          // List of all notes


    [CascadingParameter]
    public bool NewNote { get; set; }   // Determiner of Add note card render

    [CascadingParameter]
    public EventCallback<int> NotesCountEvent { get; set; }     // Change the notes count without accesing database

    [CascadingParameter]
    public EventCallback<bool> ChangeAddNoteState { get; set; } // Change determiner value of a parent component (MainLayout)
    [CascadingParameter]
    public string SearchQuery { get; set; }     // Contains search query
        

    public EventCallback<Note> AddNoteToNotes => EventCallback.Factory.Create<Note>(this, AddNote); // Event that adds note to list without accessing the db
    public EventCallback CancelAdd => EventCallback.Factory.Create(this, CancelNewNote);            // Event that cancels adding new note
    

    private void AddNote(Note note)
    {
        // Add note to on-screen list
        _notes.Add(note);
        _notes = _notes.OrderBy(n => n.Title).ToList();

        // Hide new note card
        CancelNewNote();
    }

    private void CancelNewNote()    // Hides new note card
    {
        ChangeAddNoteState.InvokeAsync(false);

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Get all notes from db
        _notes = _repo.GetAllNotes();
        if (_notes != null)
        {
            _notes = _notes.OrderBy(n => n.Title).ToList();
        }

        NotesCountEvent.InvokeAsync(_notes.Count);  // Set initial note count value
    }
}