@inject INotesRepo _repo

@switch (CurrentState)
{
    default:
    case NoteState.Regular:
        <div class="card bg-light mb-3">
            <div class="card-body note">
                @Note.Title
                <div style="margin-left: auto;">
                    <button type="button" class="btn btn-info" style="margin-right: 1rem" 
                        @onclick="(() => ChangeState(NoteState.Extended))">Show note</button>
                    <button type="button" class="btn btn-info"
                        @onclick="(() => ChangeState(NoteState.Edit))">Edit note</button>
                </div>
            </div>
        </div>
        break;

    case NoteState.Extended:
        <div class="card mb-3">
            <div class="card-header note">
                @Note.Title
                <div style="margin-left: auto;">
                    <button type="button" class="btn btn-info" style="margin-right: 1rem"
                        @onclick="(() => ChangeState(NoteState.Regular))">Hide note</button>
                    <button type="button" class="btn btn-info"
                        @onclick="(() => ChangeState(NoteState.Edit))">Edit note</button>
                </div>
            </div>
            <div class="card-body">
                <p class="card-text">@Note.Content</p>
            </div>
        </div>
        break;
    
    case NoteState.Edit:
        <div class="card mb-3">
            <div class="card-header note">
                <div style="width: 30%">
                    <input type="text" class="form-control" 
                        @bind-value="_noteEdited.Title">
                </div>
                <div style="margin-left: auto;">
                    <button type="button" class="btn btn-info" style="margin-right: 1rem"
                        @onclick="(Save)">Save note</button>
                    <button type="button" class="btn btn-info"
                        @onclick="(CancelEdit)">Cancel</button>
                </div>
            </div>
            <div class="card-body">
                <textarea type="text" rows=5 class="form-control" 
                    @onchange="ChangeContent">@_noteEdited.Content</textarea>
            </div>
        </div>
        break;
    
    case NoteState.New:
        <div class="card mb-3">
            <div class="card-header note">
                <div style="width: 30%">
                    <input type="text" class="form-control" placeholder="Title" 
                        @bind-value="_noteEdited.Title">
                </div>
                <div style="margin-left: auto;">
                    <button type="button" class="btn btn-info" style="margin-right: 1rem"
                        @onclick="(Add)">Add note</button>
                    <button type="button" class="btn btn-info"
                        @onclick="(CancelAdd)">Cancel</button>
                </div>
            </div>
            <div class="card-body">
                <textarea type="text" rows=5 class="form-control" placeholder="Content"
                    @onchange="ChangeContent">@_noteEdited.Content</textarea>
            </div>
        </div>
        break;
}


@code {
    
    private Note _noteEdited;       // Stores edited verion of a current note

    public enum NoteState           // helps to configure which "card" to render
    {
        Regular,
        Extended,
        Edit,
        New
    }

    [Parameter]
    public NoteState CurrentState { get; set; } = NoteState.Regular;    // Current card layout

    [Parameter]
    public Note Note { get; set; }      // Note retrieved from db


    [Parameter]
    public EventCallback<Note> AddNote { get; set; }        // Adds note to list without accessing the db

    [CascadingParameter]
    public EventCallback<int> NotesCountEvent { get; set; } // Change the notes count without accesing database

    [Parameter]
    public EventCallback CancelNewNote { get; set; }        // Cancels adding new note

    private void ChangeContent(ChangeEventArgs args)        // Helps to bind data to <textarea>
        => _noteEdited.Content = args.Value.ToString();

    private void ChangeState(NoteState state)
    {
        CurrentState = state;
        
        // Without the next line it breaks editing notes for some reason...
        // It took some time to figure out i need this line here but
        // I am sure there is a better way of fixing it but it will
        // require a lot of time so I won't focus on it right now
        _noteEdited = (Note)Note.Clone();   

        StateHasChanged();
    }

    private void CancelEdit()
    {
        _noteEdited = (Note)Note.Clone();   // Erases changes from _noteEdited
        
        ChangeState(NoteState.Extended);
    }

    private async Task Save()
    {
        // Save changes to the original Note obj
        Note.Title = _noteEdited.Title;     
        Note.Content = _noteEdited.Content;

        // Update data in the db
        await _repo.EditNoteAsync(Note);

        ChangeState(NoteState.Extended);
    }

    private async Task Add()
    {
        // Save changes to the original Note obj
        Note.Title = _noteEdited.Title;
        Note.Content = _noteEdited.Content;

        // Add data to the db
        await _repo.AddNoteAsync(Note);

        // Add note to list on parent (index) page
        await AddNote.InvokeAsync(Note);

        // Increase notes count
        await NotesCountEvent.InvokeAsync(1);

        StateHasChanged();
    }

    private async Task CancelAdd()
    {
        _noteEdited = (Note)Note.Clone();   // Erases changes from _noteEdited
        
        await CancelNewNote.InvokeAsync();  // Cancel adding new note
    }

    
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _noteEdited = (Note)Note.Clone();
    }
}